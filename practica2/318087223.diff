diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index 470a28e..d023db8 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -10,7 +10,7 @@ public class Estudiante {
     private String nombre;
     /* Número de cuenta. */
     private int cuenta;
-    /* Pormedio del estudiante. */
+    /* Promedio del estudiante.  aqui había un typo en la palabra promedio */
     private double promedio;
     /* Edad del estudiante.*/
     private int edad;
@@ -28,6 +28,9 @@ public class Estudiante {
                       int    edad) {
         this.nombre    = nombre;
         // Aquí va su código.
+        this.cuenta    = cuenta; 
+        this.promedio  = promedio;
+        this.edad      = edad;
     }
 
     /**
@@ -52,6 +55,7 @@ public class Estudiante {
      */
     public int getCuenta() {
         // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -60,14 +64,15 @@ public class Estudiante {
      */
     public void setCuenta(int cuenta) {
         // Aquí va su código.
+        this.cuenta = cuenta;
     }
-
     /**
      * Regresa el promedio del estudiante.
      * @return el promedio del estudiante.
      */
     public double getPromedio() {
         // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -76,6 +81,7 @@ public class Estudiante {
      */
     public void setPromedio(double promedio) {
         // Aquí va su código.
+        this.promedio = promedio;
     }
 
     /**
@@ -84,6 +90,7 @@ public class Estudiante {
      */
     public int getEdad() {
         // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -92,14 +99,19 @@ public class Estudiante {
      */
     public void setEdad(int edad) {
         // Aquí va su código.
+        this.edad = edad;
     }
 
     /**
      * Regresa una representación en cadena del estudiante.
      * @return una representación en cadena del estudiante.
      */
+   
     public String toString() {
-        // Aquí va su código.
+        return "Nombre   : " + nombre + "\n" +
+               "Cuenta   : " + String.format("%09d", cuenta) + "\n" +
+               "Promedio : " + String.format("%2.2f", promedio) + "\n" +
+               "Edad     : " + edad;
     }
 
     /**
@@ -111,8 +123,11 @@ public class Estudiante {
      *         <code>false</code> en otro caso.
      */
     public boolean equals(Estudiante estudiante) {
-        if (estudiante == null)
+        if(estudiante == null)
             return false;
         // Aquí va su código.
+        else if(this.toString().equals(estudiante.toString()))
+            return true;
+        return false;
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java b/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
index c7609f1..68506c3 100644
--- a/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/ListaEstudiante.java
@@ -1,17 +1,25 @@
 package mx.unam.ciencias.icc;
 
 /**
- * <p>Clase para listas de estudiantes doblemente ligadas.</p>
+ * <p>
+ * Clase para listas de estudiantes doblemente ligadas.
+ * </p>
  *
- * <p>Las listas de estudiantes nos permiten agregar elementos al inicio o final
+ * <p>
+ * Las listas de estudiantes nos permiten agregar elementos al inicio o final
  * de la lista, eliminar elementos de la lista, comprobar si un elemento está o
- * no en la lista, y otras operaciones básicas.</p>
+ * no en la lista, y otras operaciones básicas.
+ * </p>
  *
- * <p>Las listas de estudiantes son iterables utilizando sus nodos. Las listas
- * no aceptan a <code>null</code> como elemento.</p>
+ * <p>
+ * Las listas de estudiantes son iterables utilizando sus nodos. Las listas
+ * no aceptan a <code>null</code> como elemento.
+ * </p>
  *
- * <p>Los elementos en una lista de estudiantes siempre son instancias de la
- * clase {@link Estudiante}.</p>
+ * <p>
+ * Los elementos en una lista de estudiantes siempre son instancias de la
+ * clase {@link Estudiante}.
+ * </p>
  */
 public class ListaEstudiante {
 
@@ -27,33 +35,46 @@ public class ListaEstudiante {
         /* El nodo siguiente. */
         private Nodo siguiente;
 
-        /* Construye un nodo con un elemento. */
+        /**
+         * public Nodo
+         * 
+         * /* Construye un nodo con un elemento.
+         */
         private Nodo(Estudiante elemento) {
             // Aquí va su código.
+            
+            this.elemento = elemento;
+
         }
 
         /**
          * Regresa el nodo anterior del nodo.
+         * 
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
             // Aquí va su código.
+            return anterior;
         }
 
         /**
          * Regresa el nodo siguiente del nodo.
+         * 
          * @return el nodo siguiente del nodo.
          */
         public Nodo getSiguiente() {
             // Aquí va su código.
+            return siguiente;
         }
 
         /**
          * Regresa el elemento del nodo.
+         * 
          * @return el elemento del nodo.
          */
         public Estudiante get() {
             // Aquí va su código.
+            return elemento;
         }
     }
 
@@ -66,39 +87,70 @@ public class ListaEstudiante {
 
     /**
      * Regresa la longitud de la lista.
+     * 
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
         // Aquí va su código.
+        return longitud;
     }
 
     /**
      * Nos dice si la lista es vacía.
+     * 
      * @return <code>true</code> si la lista es vacía, <code>false</code> en
      *         otro caso.
      */
     public boolean esVacia() {
         // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
      * Agrega un elemento al final de la lista. Si la lista no tiene elementos,
      * el elemento a agregar será el primero y último.
+     * 
      * @param elemento el elemento a agregar. El elemento se agrega únicamente
      *                 si es distinto de <code>null</code>.
      */
     public void agregaFinal(Estudiante elemento) {
         // Aquí va su código.
+        if (elemento == null)
+            return;
+        Nodo n = new Nodo(elemento);
+        if (esVacia()) {
+            cabeza = n;
+            rabo = cabeza;
+            cabeza.anterior = null;
+            rabo.siguiente = null;
+        } else {
+            n.anterior = rabo;
+            rabo.siguiente = n;
+            rabo = n;
+        }
+        longitud++;
     }
 
     /**
      * Agrega un elemento al inicio de la lista. Si la lista no tiene elementos,
      * el elemento a agregar será el primero y último.
+     * 
      * @param elemento el elemento a agregar. El elemento se agrega únicamente
      *                 si es distinto de <code>null</code>.
      */
     public void agregaInicio(Estudiante elemento) {
         // Aquí va su código.
+        if (elemento == null)
+            return;
+        Nodo n = new Nodo(elemento);
+        if (esVacia())
+            cabeza = rabo = n;
+        else {
+            n.siguiente = cabeza;
+            cabeza.anterior = n;
+            cabeza = n;
+        }
+        longitud++;
     }
 
     /**
@@ -109,68 +161,162 @@ public class ListaEstudiante {
      * la lista, el elemento se agrega al fina de la misma. En otro caso,
      * después de mandar llamar el método, el elemento tendrá el índice que se
      * especifica en la lista.
-     * @param i el índice dónde insertar el elemento. Si es menor que 0 el
-     *          elemento se agrega al inicio de la lista, y si es mayor o igual
-     *          que el número de elementos en la lista se agrega al final.
+     * 
+     * @param i        el índice dónde insertar el elemento. Si es menor que 0 el
+     *                 elemento se agrega al inicio de la lista, y si es mayor o
+     *                 igual
+     *                 que el número de elementos en la lista se agrega al final.
      * @param elemento el elemento a insertar. El elemento se inserta únicamente
      *                 si es distinto de <code>null</code>.
      */
     public void inserta(int i, Estudiante elemento) {
-        // Aquí va su código.
+        if (elemento == null)
+            return;
+        else if (i <= 0)
+            agregaInicio(elemento);
+        else if (longitud <= i)
+            agregaFinal(elemento);
+        else {
+            Nodo actual = cabeza;
+            for (int index = 0; index < i; index++) {
+                actual = actual.siguiente;
+            }
+            Nodo nuevoNodo = new Nodo(elemento);
+            nuevoNodo.anterior = actual.anterior;
+            actual.anterior.siguiente = nuevoNodo;
+            actual.anterior = nuevoNodo;
+            nuevoNodo.siguiente = actual;
+            longitud++;
+        }
     }
 
     /**
      * Elimina un elemento de la lista. Si el elemento no está contenido en la
      * lista, el método no la modifica.
+     * 
      * @param elemento el elemento a eliminar.
      */
     public void elimina(Estudiante elemento) {
         // Aquí va su código.
+        Nodo n = cabeza;
+        while (n != null && !n.elemento.equals(elemento)) {
+            n = n.siguiente;
+        }
+
+        if (n == null) {
+            return;
+        }
+
+        if (n == cabeza) {
+            cabeza = cabeza.siguiente;
+            if (cabeza != null) {
+                cabeza.anterior = null;
+            } else {
+                rabo = null;
+            }
+        } else {
+            n.anterior.siguiente = n.siguiente;
+            if (n.siguiente != null) {
+                n.siguiente.anterior = n.anterior;
+            } else {
+                rabo = n.anterior;
+            }
+        }
+        longitud--;
     }
 
     /**
      * Elimina el primer elemento de la lista y lo regresa.
+     * 
      * @return el primer elemento de la lista antes de eliminarlo, o
      *         <code>null</code> si la lista es vacía.
      */
     public Estudiante eliminaPrimero() {
         // Aquí va su código.
+        if(esVacia()) return null;
+        Nodo eliminado = cabeza;
+        if(longitud == 1) limpia();
+        else{
+          cabeza = cabeza.siguiente;
+          cabeza.anterior = null;
+          longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
      * Elimina el último elemento de la lista y lo regresa.
+     * 
      * @return el último elemento de la lista antes de eliminarlo, o
      *         <code>null</code> si la lista es vacía.
      */
     public Estudiante eliminaUltimo() {
         // Aquí va su código.
+        if(esVacia()) return null;
+        Nodo eliminado = rabo;
+        if(longitud == 1) limpia();
+        else{
+          rabo = rabo.anterior;
+          rabo.siguiente = null;
+          longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
      * Nos dice si un elemento está en la lista.
+     * 
      * @param elemento el elemento que queremos saber si está en la lista.
      * @return <code>true</code> si <code>elemento</code> está en la lista,
      *         <code>false</code> en otro caso.
      */
     public boolean contiene(Estudiante elemento) {
-        // Aquí va su código.
+        Nodo n = cabeza; 
+        while (n != null) {
+            if (n.elemento.equals(elemento)) {
+                return true; 
+            }
+            n = n.siguiente; 
+        }
+        return false;
+
     }
 
     /**
      * Regresa la reversa de la lista.
+     * 
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public ListaEstudiante reversa() {
         // Aquí va su código.
+        ListaEstudiante lista = new ListaEstudiante();
+        Nodo n = rabo;
+        // creo una variable nodo
+        while (n != null) {
+            // mientra n (nodo) sea distinto de nulo
+            lista.agregaFinal(n.elemento);
+            n = n.anterior;
+        }
+        return lista;
     }
 
     /**
      * Regresa una copia de la lista. La copia tiene los mismos elementos que la
      * lista que manda llamar el método, en el mismo orden.
+     * 
      * @return una copiad de la lista.
      */
     public ListaEstudiante copia() {
         // Aquí va su código.
+        Nodo n = cabeza;
+        ListaEstudiante copiaL = new ListaEstudiante();
+        if (esVacia())
+            return copiaL;
+        while (n != null) {
+            copiaL.agregaFinal(n.elemento);
+            n = n.siguiente;
+        }
+        return copiaL;
     }
 
     /**
@@ -178,28 +324,35 @@ public class ListaEstudiante {
      */
     public void limpia() {
         // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
      * Regresa el primer elemento de la lista.
+     * 
      * @return el primer elemento de la lista, o <code>null</code> si la lista
      *         es vacía.
      */
     public Estudiante getPrimero() {
         // Aquí va su código.
+        return (longitud != 0) ? cabeza.elemento : null;
     }
 
     /**
      * Regresa el último elemento de la lista.
+     * 
      * @return el último elemento de la lista, o <code>null</code> si la lista
      *         es vacía.
      */
     public Estudiante getUltimo() {
         // Aquí va su código.
+        return (longitud != 0) ? rabo.elemento :  null;
     }
 
     /**
      * Regresa el <em>i</em>-ésimo elemento de la lista.
+     * 
      * @param i el índice del elemento que queremos.
      * @return el <em>i</em>-ésimo elemento de la lista, o <code>null</code> si
      *         <em>i</em> es menor que cero o mayor o igual que el número de
@@ -207,49 +360,94 @@ public class ListaEstudiante {
      */
     public Estudiante get(int i) {
         // Aquí va su código.
+        if (i < 0 || i >= longitud)
+            return null;
+        Nodo n = cabeza;
+        while (i-- > 0) {
+            n = n.siguiente;
+        }
+        return n.elemento; 
     }
 
     /**
      * Regresa el índice del elemento recibido en la lista.
+     * 
      * @param elemento el elemento del que se busca el índice.
      * @return el índice del elemento recibido en la lista, o -1 si el elemento
      *         no está contenido en la lista.
      */
     public int indiceDe(Estudiante elemento) {
         // Aquí va su código.
+        Nodo n = cabeza;
+        int indice = 0;
+        while (n != null) {
+            if (n.elemento.equals(elemento))
+                return indice;
+            n = n.siguiente;
+            indice++;
+        }
+        return -1;
     }
 
     /**
      * Regresa una representación en cadena de la lista.
+     * 
      * @return una representación en cadena de la lista.
      */
     public String toString() {
         // Aquí va su código.
+        if (esVacia())
+            return "[]";
+        String s = "[";
+        for (int i = 0; i < longitud - 1; i++)
+            s += String.format("%s, ", get(i));
+        s += String.format("%s]", get(longitud - 1));
+        return s;
     }
 
     /**
      * Nos dice si la lista es igual a la lista recibida.
+     * 
      * @param lista la lista con la que hay que comparar.
      * @return <code>true</code> si la lista es igual a la recibida;
      *         <code>false</code> en otro caso.
      */
     public boolean equals(ListaEstudiante lista) {
         // Aquí va su código.
+        if (lista == null)
+            return false;
+        else if (lista.getLongitud() != longitud)
+            return false;
+        else if (lista.getLongitud() == 0 && longitud == 0)
+            return true;
+        Nodo nodo = cabeza;
+        int i = 0;
+        while (nodo != null) {
+            if (nodo.elemento.equals(lista.get(i)) == false)
+                return false;
+            nodo = nodo.siguiente;
+            i++;
+        }
+        return true;
     }
 
     /**
      * Regresa el nodo cabeza de la lista.
+     * 
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
         // Aquí va su código.
+        return cabeza;
     }
 
     /**
      * Regresa el nodo rabo de la lista.
+     * 
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
         // Aquí va su código.
+        return rabo;
     }
 }
