diff --git a/src/main/java/mx/unam/ciencias/icc/Arreglos.java b/src/main/java/mx/unam/ciencias/icc/Arreglos.java
index cb53134..2e9f23c 100644
--- a/src/main/java/mx/unam/ciencias/icc/Arreglos.java
+++ b/src/main/java/mx/unam/ciencias/icc/Arreglos.java
@@ -15,8 +15,7 @@ public class Arreglos {
      * @param <T> tipo del que puede ser el arreglo.
      * @param arreglo un arreglo cuyos elementos son comparables.
      */
-    public static <T extends Comparable<T>> void
-    selectionSort(T[] arreglo) {
+    public static <T extends Comparable<T>> void selectionSort(T[] arreglo) {
         selectionSort(arreglo, (a, b) -> a.compareTo(b));
     }
 
@@ -26,9 +25,25 @@ public class Arreglos {
      * @param arreglo el arreglo a ordenar.
      * @param comparador el comparador para ordernar el arreglo.
      */
-    public static <T> void
-    selectionSort(T[] arreglo, Comparator<T> comparador) {
+    public static <T> void selectionSort(T[] arreglo, Comparator<T> comparador) {
         // Aquí va su código.
+        int m;
+        for (int i = 0; i < arreglo.length; i++) {
+            m = i;
+            for (int j = i + 1; j < arreglo.length; j++) {
+                if (comparador.compare(arreglo[j], arreglo[m]) < 0) {
+                    m = j;
+                }
+            }
+            intercambia(arreglo, i, m);
+        }
+    }
+
+    private static <T> void intercambia(T[] arreglo, int a, int b) {
+        T elemento1 = arreglo[a];
+        T elemento2 = arreglo[b];
+        arreglo[a] = elemento2;
+        arreglo[b] = elemento1;
     }
 
     /**
@@ -36,8 +51,7 @@ public class Arreglos {
      * @param <T> tipo del que puede ser el arreglo.
      * @param arreglo un arreglo cuyos elementos son comparables.
      */
-    public static <T extends Comparable<T>> void
-    quickSort(T[] arreglo) {
+    public static <T extends Comparable<T>> void quickSort(T[] arreglo) {
         quickSort(arreglo, (a, b) -> a.compareTo(b));
     }
 
@@ -47,11 +61,33 @@ public class Arreglos {
      * @param arreglo el arreglo a ordenar.
      * @param comparador el comparador para ordenar el arreglo.
      */
-    public static <T> void
-    quickSort(T[] arreglo, Comparator<T> comparador) {
+    public static <T> void quickSort(T[] arreglo, Comparator<T> comparador) {
         // Aquí va su código.
+        quickSort(arreglo, comparador, 0, arreglo.length - 1);
     }
 
+    private static <T> void quickSort(T[] arreglo, Comparator<T> comparador, int a, int b) {
+        if (b <= a)
+            return;
+        int i = a + 1;
+        int j = b;
+        while (i < j) {
+            if (comparador.compare(arreglo[i], arreglo[a]) > 0 && comparador.compare(arreglo[a], arreglo[j]) >= 0) {
+                intercambia(arreglo, i, j);
+                i = i + 1;
+                j = j - 1;
+            } else if (comparador.compare(arreglo[a], arreglo[i]) >= 0)
+                i = i + 1;
+            else
+                j = j - 1;
+        }
+        if (comparador.compare(arreglo[i], arreglo[a]) > 0)
+            i = i - 1;
+        intercambia(arreglo, a, i);
+        quickSort(arreglo, comparador, a, i - 1);
+        quickSort(arreglo, comparador, i + 1, b);
+    }
+             
     /**
      * Hace una búsqueda binaria del elemento en el arreglo. Regresa el índice
      * del elemento en el arreglo, o -1 si no se encuentra.
@@ -77,5 +113,28 @@ public class Arreglos {
     public static <T> int
     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
         // Aquí va su código.
+        int a = 0;
+        int b = arreglo.length - 1;
+        while (a <= b){
+            int mitad = (a + b) / 2;
+            if(comparador.compare(arreglo[mitad], elemento) == 0){
+                return mitad;
+            }
+            else if(comparador.compare(arreglo[mitad], elemento) > 0){
+                if(comparador.compare(arreglo[a], elemento) == 0){
+                    return a;
+                }
+                b = mitad - 1;
+                a = a + 1;
+            }
+            else{
+                if(comparador.compare(arreglo[b], elemento) == 0){
+                return b;
+                }
+                b = b - 1;
+                a = mitad + 1;
+            }
+        }
+        return -1;
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java b/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java
index ed50626..a5f5b2d 100644
--- a/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java
+++ b/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java
@@ -28,6 +28,7 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public BaseDeDatos() {
         // Aquí va su código.
+        registros = new Lista<R>();
     }
 
     /**
@@ -36,6 +37,7 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public int getNumRegistros() {
         // Aquí va su código.
+        return registros.getLongitud();
     }
 
     /**
@@ -45,6 +47,7 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public Lista<R> getRegistros() {
         // Aquí va su código.
+        return registros.copia();
     }
 
     /**
@@ -53,6 +56,7 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public void agregaRegistro(R registro) {
         // Aquí va su código.
+        registros.agregaFinal(registro);
     }
 
     /**
@@ -61,6 +65,7 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public void eliminaRegistro(R registro) {
         // Aquí va su código.
+        registros.elimina(registro);
     }
 
     /**
@@ -68,6 +73,7 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public void limpia() {
         // Aquí va su código.
+        registros.limpia();
     }
 
     /**
@@ -77,6 +83,11 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public void guarda(BufferedWriter out) throws IOException {
         // Aquí va su código.
+        IteradorLista<R> il = registros.iteradorLista();
+        while(il.hasNext()){
+            R reg = (R) il.next();
+            out.write(reg.seria());
+        }
     }
 
     /**
@@ -88,6 +99,18 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public void carga(BufferedReader in) throws IOException {
         // Aquí va su código.
+        registros.limpia(); 
+        //l por lista
+        String l;
+        for (l = in.readLine(); l != null; l = in.readLine())  {
+            R r = creaRegistro();
+            try {
+                r.deseria(l);
+            } catch (ExcepcionLineaInvalida e) {
+                break;
+            }
+            agregaRegistro (r);
+        }
     }
 
     /**
@@ -101,6 +124,18 @@ public abstract class BaseDeDatos<R extends Registro<R, C>, C extends Enum> {
      */
     public Lista<R> buscaRegistros(C campo, Object valor) {
         // Aquí va su código.
+        if (!(campo instanceof CampoEstudiante)) {
+            throw new IllegalArgumentException();
+        }
+        Lista<R> l = new Lista<>();
+        IteradorLista<R> il = registros.iteradorLista();
+        while (il.hasNext()) {
+            R reg = (R) il.next();
+            if (reg.casa(campo, valor)) {
+                l.agregaFinal(reg);
+            }
+        }
+        return l;
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java b/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
index 99253e8..0ddbdad 100644
--- a/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
+++ b/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
@@ -12,5 +12,6 @@ public class BaseDeDatosEstudiantes
      */
     @Override public Estudiante creaRegistro() {
         // Aquí va su código.
+        return new Estudiante(null, 0, 0.0, 0);
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java b/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java
index 4a8740d..b955c79 100644
--- a/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java
@@ -21,5 +21,12 @@ public enum CampoEstudiante {
      */
     @Override public String toString() {
         // Aquí va su código.
+        switch(this){
+            case NOMBRE: return "Nombre";
+            case CUENTA: return "# Cuenta"; //#por el num de cuenta
+            case PROMEDIO : return "Promedio";
+            case EDAD: return "Edad";
+            default: throw new IllegalArgumentException(); //default porque funciona con switch, si no existe Illegal argument exception
+        }
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index 26c920b..2802440 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -8,7 +8,7 @@ package mx.unam.ciencias.icc;
  * actualizarse con los valores de otro estudiante.
  */
 public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
-
+//atributos
     /* Nombre del estudiante. */
     private String nombre;
     /* Número de cuenta. */
@@ -26,10 +26,14 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param edad la edad del estudiante.
      */
     public Estudiante(String nombre,
-                      int    cuenta,
-                      double promedio,
-                      int    edad) {
+            int cuenta,
+            double promedio,
+            int edad) {
         // Aquí va su código.
+        this.nombre = nombre;
+        this.cuenta = cuenta;
+        this.promedio = promedio;
+        this.edad = edad;
     }
 
     /**
@@ -38,6 +42,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public String getNombre() {
         // Aquí va su código.
+        return nombre;
     }
 
     /**
@@ -46,6 +51,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public void setNombre(String nombre) {
         // Aquí va su código.
+        this.nombre = nombre;
     }
 
     /**
@@ -54,6 +60,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public int getCuenta() {
         // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -62,6 +69,11 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public void setCuenta(int cuenta) {
         // Aquí va su código.
+        if (cuenta >= 0) {
+            this.cuenta = cuenta;
+        } else {
+            throw new IllegalArgumentException("El No. de cuenta no puede ser negativo.");
+        }
     }
 
     /**
@@ -70,6 +82,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public double getPromedio() {
         // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -78,6 +91,11 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public void setPromedio(double promedio) {
         // Aquí va su código.
+        if (promedio >= 0) {
+            this.promedio = promedio;
+        } else {
+            throw new IllegalArgumentException("El promedio no puede ser negativo.");
+        } 
     }
 
     /**
@@ -86,6 +104,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public int getEdad() {
         // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -94,14 +113,27 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      */
     public void setEdad(int edad) {
         // Aquí va su código.
+        if (edad >= 0) {
+            this.edad = edad;
+        } else {
+            throw new IllegalArgumentException("La edad no puede ser negativa.");
+        }  
     }
 
     /**
      * Regresa una representación en cadena del estudiante.
      * @return una representación en cadena del estudiante.
      */
-    @Override public String toString() {
+    @Override
+    public String toString() {
         // Aquí va su código.
+        String cadena = String.format(
+                "Nombre   : %s\n" +
+                "Cuenta   : %09d\n" +
+                "Promedio : %2.2f\n" +
+                "Edad     : %d",
+                nombre, cuenta, promedio, edad);
+        return cadena;
     }
 
     /**
@@ -112,11 +144,18 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      *         mismas propiedades que el objeto que manda llamar al método,
      *         <code>false</code> en otro caso.
      */
-    @Override public boolean equals(Object objeto) {
+    @Override
+    public boolean equals(Object objeto) {
         if (!(objeto instanceof Estudiante))
             return false;
-        Estudiante estudiante = (Estudiante)objeto;
+        Estudiante estudiante = (Estudiante) objeto;
         // Aquí va su código.
+        if (estudiante == null)
+            return false;
+        if (this.nombre.equals(estudiante.nombre) && this.cuenta == estudiante.cuenta
+                && this.promedio == estudiante.promedio && this.edad == estudiante.edad)
+            return true;
+        return false;
     }
 
     /**
@@ -125,8 +164,10 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * Estudiante#deseria}.
      * @return la seriación del estudiante en una línea de texto.
      */
-    @Override public String seria() {
+    @Override
+    public String seria() {
         // Aquí va su código.
+        return (String.format("%s\t%d\t%2.2f\t%d\n", nombre, cuenta, promedio, edad));
     }
 
     /**
@@ -137,8 +178,27 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @throws ExcepcionLineaInvalida si la línea recibida es nula, vacía o no
      *         es una seriación válida de un estudiante.
      */
-    @Override public void deseria(String linea) {
+    @Override
+    public void deseria(String linea) {
         // Aquí va su código.
+        // por si es nula, vacía
+        if (linea == null)
+            throw new ExcepcionLineaInvalida();
+        // campos es un arreglo de 4 elementos
+        String[] campos = linea.trim().split("\t");
+        // t es un divisor
+        // no es una seriación valida de un estudiante
+
+        try {
+            nombre = (campos[0]);
+            cuenta = Integer.parseInt(campos[1]);
+            promedio = Double.parseDouble(campos[2]);
+            edad = Integer.parseInt(campos[3]);
+        } catch (Exception e) {
+            // excepcion es un objeto (importante, las excepciones son objetps) de tipo
+            // ExcepcionLineaInvalida
+            throw new ExcepcionLineaInvalida();
+        }
     }
 
     /**
@@ -166,8 +226,55 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      *         <code>false</code> en otro caso.
      * @throws IllegalArgumentException si el campo es <code>null</code>.
      */
-    @Override public boolean casa(CampoEstudiante campo, Object valor) {
+    @Override
+    public boolean casa(CampoEstudiante campo, Object valor) {
         // Aquí va su código.
+        if (!(campo instanceof CampoEstudiante))
+            throw new IllegalArgumentException();
+        CampoEstudiante c = (CampoEstudiante) campo;
+        switch (c) {
+            case NOMBRE:
+                return casaNombre(valor);
+            case CUENTA:
+                return casaCuenta(valor);
+            case EDAD:
+                return casaEdad(valor);
+            case PROMEDIO:
+                return casaPromedio(valor);
+            default:
+                return false;
+        }
+    }
+
+    private boolean casaNombre(Object o) {
+        if (!(o instanceof String))
+            return false;
+        String v = (String) o;
+        if (v.isEmpty())
+            return false;
+        return nombre.indexOf(v) != -1;
+    }
+
+    private boolean casaCuenta(Object o) {
+        if (!(o instanceof Integer))
+            return false;
+        Integer v = (Integer) o;
+        return cuenta >= v.intValue();
+    }
+
+    private boolean casaEdad(Object o) {
+        if (!(o instanceof Integer))
+            return false;
+        Integer v = (Integer) o;
+        return edad >= v.intValue();
+    }
+
+    private boolean casaPromedio(Object o) {
+        if (!(o instanceof Double))
+            return false;
+        Double v = (Double) o;
+        return promedio >= v.doubleValue();
+
     }
 
     /**
@@ -175,7 +282,14 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param estudiante el estudiante con el cual actualizar los valores.
      * @throws IllegalArgumentException si el estudiante es <code>null</code>.
      */
-    @Override public void actualiza(Estudiante estudiante) {
+    @Override
+    public void actualiza(Estudiante estudiante) {
         // Aquí va su código.
+        if (estudiante == null)
+            throw new IllegalArgumentException();
+        nombre = estudiante.getNombre();
+        cuenta = estudiante.getCuenta();
+        promedio = estudiante.getPromedio();
+        edad = estudiante.getEdad();
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Lista.java b/src/main/java/mx/unam/ciencias/icc/Lista.java
index abc8099..7fff5d0 100644
--- a/src/main/java/mx/unam/ciencias/icc/Lista.java
+++ b/src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -31,6 +31,7 @@ public class Lista<T> implements Iterable<T> {
         /* Construye un nodo con un elemento. */
         private Nodo(T elemento) {
             // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -44,36 +45,65 @@ public class Lista<T> implements Iterable<T> {
         /* Construye un nuevo iterador. */
         private Iterador() {
             // Aquí va su código.
+            siguiente = cabeza;
         }
 
         /* Nos dice si hay un elemento siguiente. */
-        @Override public boolean hasNext() {
+        @Override
+        public boolean hasNext() {
             // Aquí va su código.
+            return (siguiente != null);
         }
 
         /* Nos da el elemento siguiente. */
-        @Override public T next() {
+        @Override
+        public T next() {
             // Aquí va su código.
+            if (!hasNext())
+                throw new NoSuchElementException();
+            else {
+                T elem = siguiente.elemento;
+                anterior = siguiente;
+                siguiente = siguiente.siguiente;
+                return elem;
+            }
         }
 
         /* Nos dice si hay un elemento anterior. */
-        @Override public boolean hasPrevious() {
+        @Override
+        public boolean hasPrevious() {
             // Aquí va su código.
+            return (anterior != null);
         }
 
         /* Nos da el elemento anterior. */
-        @Override public T previous() {
+        @Override
+        public T previous() {
             // Aquí va su código.
+            if (!hasPrevious())
+                throw new NoSuchElementException();
+            else {
+                T elem = anterior.elemento;
+                siguiente = anterior;
+                anterior = anterior.anterior;
+                return elem;
+            }
         }
 
         /* Mueve el iterador al inicio de la lista. */
-        @Override public void start() {
+        @Override
+        public void start() {
             // Aquí va su código.
+            anterior = null;
+            siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
-        @Override public void end() {
+        @Override
+        public void end() {
             // Aquí va su código.
+            siguiente = null;
+            anterior = rabo;
         }
     }
 
@@ -90,6 +120,7 @@ public class Lista<T> implements Iterable<T> {
      */
     public int getLongitud() {
         // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -99,6 +130,7 @@ public class Lista<T> implements Iterable<T> {
      */
     public boolean esVacia() {
         // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
@@ -110,6 +142,20 @@ public class Lista<T> implements Iterable<T> {
      */
     public void agregaFinal(T elemento) {
         // Aquí va su código.
+        if (elemento == null)
+            throw new IllegalArgumentException();
+        Nodo n = new Nodo(elemento);
+        if (esVacia()) {
+            cabeza = n;
+            rabo = cabeza;
+            cabeza.anterior = null;
+            rabo.siguiente = null;
+        } else {
+            n.anterior = rabo;
+            rabo.siguiente = n;
+            rabo = n;
+        }
+        longitud++;
     }
 
     /**
@@ -121,8 +167,16 @@ public class Lista<T> implements Iterable<T> {
      */
     public void agregaInicio(T elemento) {
         // Aquí va su código.
+        if(elemento == null) throw new IllegalArgumentException();
+      Nodo nodo = new Nodo(elemento);
+      if(esVacia()) cabeza = rabo = nodo;
+      else{
+        nodo.siguiente = cabeza;
+        cabeza.anterior = nodo;
+        cabeza = nodo;
+      }
+      longitud++;
     }
-
     /**
      * Inserta un elemento en un índice explícito.
      *
@@ -140,6 +194,23 @@ public class Lista<T> implements Iterable<T> {
      */
     public void inserta(int i, T elemento) {
         // Aquí va su código.
+        if (elemento == null) throw new IllegalArgumentException();
+        else if (i <= 0)
+            agregaInicio(elemento);
+        else if (longitud <= i)
+            agregaFinal(elemento);
+        else {
+            Nodo actual = cabeza;
+            for (int index = 0; index < i; index++) {
+                actual = actual.siguiente;
+            }
+            Nodo nuevoNodo = new Nodo(elemento);
+            nuevoNodo.anterior = actual.anterior;
+            actual.anterior.siguiente = nuevoNodo;
+            actual.anterior = nuevoNodo;
+            nuevoNodo.siguiente = actual;
+            longitud++;
+        }
     }
 
     /**
@@ -149,6 +220,31 @@ public class Lista<T> implements Iterable<T> {
      */
     public void elimina(T elemento) {
         // Aquí va su código.
+        Nodo n = cabeza;
+        while (n != null && !n.elemento.equals(elemento)) {
+            n = n.siguiente;
+        }
+
+        if (n == null) {
+            return;
+        }
+
+        if (n == cabeza) {
+            cabeza = cabeza.siguiente;
+            if (cabeza != null) {
+                cabeza.anterior = null;
+            } else {
+                rabo = null;
+            }
+        } else {
+            n.anterior.siguiente = n.siguiente;
+            if (n.siguiente != null) {
+                n.siguiente.anterior = n.anterior;
+            } else {
+                rabo = n.anterior;
+            }
+        }
+        longitud--;
     }
 
     /**
@@ -158,6 +254,17 @@ public class Lista<T> implements Iterable<T> {
      */
     public T eliminaPrimero() {
         // Aquí va su código.
+        if(esVacia())
+            throw new NoSuchElementException();
+        Nodo eliminado = cabeza;
+        if (longitud == 1)
+            limpia();
+        else {
+            cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+            longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
@@ -167,6 +274,18 @@ public class Lista<T> implements Iterable<T> {
      */
     public T eliminaUltimo() {
         // Aquí va su código.
+        if(esVacia()){
+            throw new NoSuchElementException();
+        }
+        Nodo eliminado = rabo;
+        if (longitud == 1)
+            limpia();
+        else {
+            rabo = rabo.anterior;
+            rabo.siguiente = null;
+            longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
@@ -177,6 +296,14 @@ public class Lista<T> implements Iterable<T> {
      */
     public boolean contiene(T elemento) {
         // Aquí va su código.
+        Nodo n = cabeza;
+        while(n != null) {
+            if(n.elemento.equals(elemento)) {
+                return true;
+            }
+            n = n.siguiente;
+        }
+        return false;
     }
 
     /**
@@ -185,6 +312,15 @@ public class Lista<T> implements Iterable<T> {
      */
     public Lista<T> reversa() {
         // Aquí va su código.
+        Lista<T> lista = new Lista<T>();
+        Nodo n = rabo;
+        // creo una variable nodo
+        while (n != null) {
+            // mientra n (nodo) sea distinto de nulo
+            lista.agregaFinal(n.elemento);
+            n = n.anterior;
+        }
+        return lista;
     }
 
     /**
@@ -194,6 +330,14 @@ public class Lista<T> implements Iterable<T> {
      */
     public Lista<T> copia() {
         // Aquí va su código.
+        Nodo nodo = cabeza;
+        Lista<T> copiaLista = new Lista<T>();
+        if(esVacia()) return copiaLista;
+        while(nodo != null){
+          copiaLista.agregaFinal(nodo.elemento);
+          nodo = nodo.siguiente;
+        }
+        return copiaLista;
     }
 
     /**
@@ -201,6 +345,8 @@ public class Lista<T> implements Iterable<T> {
      */
     public void limpia() {
         // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -210,6 +356,10 @@ public class Lista<T> implements Iterable<T> {
      */
     public T getPrimero() {
         // Aquí va su código.
+        if (longitud != 0)
+            return cabeza.elemento;
+        else
+            throw new NoSuchElementException();
     }
 
     /**
@@ -219,6 +369,10 @@ public class Lista<T> implements Iterable<T> {
      */
     public T getUltimo() {
         // Aquí va su código.
+        if (longitud != 0)
+            return rabo.elemento;
+        else
+            throw new NoSuchElementException();
     }
 
     /**
@@ -230,6 +384,13 @@ public class Lista<T> implements Iterable<T> {
      */
     public T get(int i) {
         // Aquí va su código.
+        if (i < 0 || i >= longitud)
+            throw new ExcepcionIndiceInvalido();
+        Nodo n = cabeza;
+        for (int index = 0; index < i; index++) {
+            n = n.siguiente;
+        }
+        return n.elemento;
     }
 
     /**
@@ -240,14 +401,31 @@ public class Lista<T> implements Iterable<T> {
      */
     public int indiceDe(T elemento) {
         // Aquí va su código.
+        Nodo n = cabeza;
+        int indice = 0;
+        while (n != null) {
+            if (n.elemento.equals(elemento))
+                return indice;
+            n = n.siguiente;
+            indice++;
+        }
+        return -1;
     }
 
     /**
      * Regresa una representación en cadena de la lista.
      * @return una representación en cadena de la lista.
      */
-    @Override public String toString() {
+    @Override 
+    public String toString() {
         // Aquí va su código.
+        if (esVacia())
+            return "[]";
+        String s = "[";
+        for (int i = 0; i < longitud - 1; i++)
+            s += String.format("%s, ", get(i));
+        s += String.format("%s]", get(longitud - 1));
+        return s;
     }
 
     /**
@@ -261,6 +439,22 @@ public class Lista<T> implements Iterable<T> {
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
         // Aquí va su código.
+        if (lista == null)
+            return false;
+        else if (lista.getLongitud() != longitud)
+            return false;
+        else if (lista.getLongitud() == 0 && longitud == 0)
+            return true;
+        Nodo nodo = cabeza;
+        int i = 0;
+        while (nodo != null) {
+            if (nodo.elemento.equals(lista.get(i)) == false)
+                return false;
+            nodo = nodo.siguiente;
+            i++;
+        }
+        return true;
+        
     }
 
     /**
@@ -289,6 +483,57 @@ public class Lista<T> implements Iterable<T> {
      */
     public Lista<T> mergeSort(Comparator<T> comparador) {
         // Aquí va su código.
+        return mergeSort(copia(), comparador);
+        //regresa la copia de una lista
+    }
+    
+    //método que divide la lista
+    private Lista<T> mergeSort(Lista<T> l, Comparator<T> comparador) {
+        if (l.esVacia() || l.getLongitud() <= 1) {
+            return l; //l de lista
+            // revisa si no es nulo o su longitud es menor a cero, 
+            // tambien pudo haber sido ==0
+        }
+        int mitad = l.getLongitud() / 2; //divide la lista
+        Lista<T> l1 = new Lista<T>(); //crea una nueva lista
+        Lista<T> l2;                  //lista para guardar las mitades
+        while (l.getLongitud() != mitad) {
+            l1.agregaFinal(l.getPrimero());
+            if (l.getLongitud() != 0) //longitud distinta de 0 (null no porque es elemento)
+                l.eliminaPrimero(); //elimina el primero para no dejar la lista y desperdiciar memoria
+        }
+        l2 = l.copia(); 
+        return mezcla(mergeSort(l1, comparador), mergeSort(l2, comparador), comparador);
+    }
+
+    //método que hace la mezcla de las listas a y b en una lista ordenada
+    private Lista<T> mezcla(Lista<T> a, Lista<T> b, Comparator<T> comparador) {
+        Lista<T> listaOrdenada = new Lista<T>();
+        //crea una nueva lista y la asigna a la lista ordenada
+        while (a.cabeza != null && b.cabeza != null) {
+            int i = comparador.compare(a.cabeza.elemento, b.cabeza.elemento);
+            //comparamos los elementos de a y b y los agregamos a la variable i
+            if (i <= 0) { //i es menor o igual a 0
+                listaOrdenada.agregaFinal(a.getPrimero()); 
+                a.eliminaPrimero();
+                //agregamos el primero de a al final de la lista ordenada y la borra
+            } else {
+                listaOrdenada.agregaFinal(b.getPrimero());
+                b.eliminaPrimero(); 
+                //igual que anterior pero con b
+            }
+        }
+
+        //agregamos los elementos restantes de la lista
+        while (a.cabeza != null) {
+            listaOrdenada.agregaFinal(a.getPrimero());
+            a.eliminaPrimero();
+        }
+        while (b.cabeza != null) {
+            listaOrdenada.agregaFinal(b.getPrimero());
+            b.eliminaPrimero();
+        }
+        return listaOrdenada;
     }
 
     /**
@@ -314,6 +559,12 @@ public class Lista<T> implements Iterable<T> {
      */
     public boolean busquedaLineal(T elemento, Comparator<T> comparador) {
         // Aquí va su código.
+        Nodo n = cabeza;
+        while(n != null){
+            if(comparador.compare(elemento, n.elemento) == 0) return true;
+            n = n.siguiente;
+        }
+        return false;
     }
 
     /**
